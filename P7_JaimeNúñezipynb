{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "b9a274a1-2a9d-405b-979a-3ea822a192a9",
   "metadata": {},
   "source": [
    "**Lista de Imports**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "61ced5e5-86cf-4b2b-b58b-32636cc8b81b",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import time\n",
    "import pandas as pd\n",
    "from IPython.display import display\n",
    "from scipy.optimize import linprog, minimize\n",
    "import time\n",
    "from scipy.linalg import solve\n",
    "from collections import Counter"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "54fd88c3-701b-4670-88f5-c37c976e7538",
   "metadata": {},
   "source": [
    "**Punto 1**\n",
    "\n",
    "G&L es un pequeño fabricante de equipo y accesorios para golf donde su distribuidor apunta está dispuesto en adquirir en los siguientes tres meses todas las bolsas de golf para dos tipos de públicos específicos: Modelo Estándar y Modelo Deluxe. El director de manufactura estima que durante los siguientes tres meses los tiempos disponibles en manufactura están segementados para 630 horas de tiempo de corte y teñido, 600 de tiempo de costura, 708 horas de tiempo de terminado y 135 horas de tiempo de inspección y empaque para la producción de las bolsas de golf. Como caso de análisis, se busca maximizar las utilidades de G&L."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b4cbc855-07ed-491b-a85b-ab25bd2257c1",
   "metadata": {},
   "source": [
    "**Variables de Decisión**\n",
    "\n",
    "$X_{1}:$ Cantidad de bolsas del Modelo Estándar\n",
    "\n",
    "$X_{2}:$ Cantidad de bolsas del Modelo Deluxe\n",
    "\n",
    "\n",
    "**Función Objetivo**\n",
    "\n",
    "$max  F(x_{1},x_{2}):$ $U_{Me} \\cdot X_{1}$ + $U_{Md} \\cdot X_{2} $ \n",
    "\n",
    "*Para el Problema Primal*\n",
    "\n",
    "$min F(x_{1},x_{2}):$ $-U_{Me} \\cdot X_{1}$ - $U_{Md} \\cdot X_{2}$ \n",
    "\n",
    "Donde,\n",
    "\n",
    "$U_{Me}:$ Utilidad del bolso de Modelo Estándar ($7)\n",
    "\n",
    "$U_{Md}:$ Utilidad del bolso de Modelo Deluxe ($9)\n",
    "\n",
    "\n",
    "**Planteamiento de Restricciones**\n",
    "\n",
    "$\\frac{7}{10} \\cdot X_{1} + X_{2} \\leq T_{CyT} \\longmapsto -\\frac{7}{10} \\cdot X_{1} - X_{2} \\geq -T_{CyT}$ \n",
    "\n",
    "$\\frac{1}{2} \\cdot X_{1} + \\frac{5}{6}X_{2} \\leq T_{Co} \\longmapsto -\\frac{1}{2} \\cdot X_{1} - \\frac{5}{6}X_{2} \\geq -T_{Co}$ \n",
    "\n",
    "$ X_{1} + \\frac{2}{3} \\cdot X_{2} \\leq T_{Te} \\longmapsto -X_{1} - \\frac{2}{3} \\cdot X_{2} \\geq -T_{Te}$ \n",
    "\n",
    "$ \\frac{1}{10} \\cdot X_{1} + \\frac{1}{4} \\cdot X_{2} \\leq T_{IyE} \\longmapsto -\\frac{1}{10} \\cdot X_{1} - \\frac{1}{4} \\cdot X_{2} \\geq -T_{IyE}$ \n",
    "\n",
    "$X_{1}, X_{2} \\geq 0$\n",
    "\n",
    "Donde,\n",
    "\n",
    "$T_{CyT}:$ Tiempo máximo de la planta para el Corte y Teñido (630h)\n",
    "\n",
    "$T_{Co}:$ Tiempo máximo de la planta para la Costura (600h)\n",
    "\n",
    "$T_{Te}:$ Tiempo máximo de la planta para el Terminado (708h)\n",
    "\n",
    "$T_{IyE}:$ Tiempo máximo de la planta para la Inspección y Empaque (135h)\n",
    "\n",
    "\n",
    "**Solución del Problema Primal**\n",
    "\n",
    "Se hace el planteamiento como un problema LP de minimazación, es decir:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "4ce647bb-83c7-41cb-acf2-b6dc0c864522",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "En la siguiente tabla se recopila el resultado de la función objetivo y solución de las variables básicas:\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Tipo</th>\n",
       "      <th>Valor [$]</th>\n",
       "      <th>Solución [X1, X2]</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Normal</td>\n",
       "      <td>6048.0</td>\n",
       "      <td>[540.0, 252.0]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>B. Estándar</td>\n",
       "      <td>4956.0</td>\n",
       "      <td>[708.0, 0.0]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>B. Deluxe</td>\n",
       "      <td>4860.0</td>\n",
       "      <td>[0.0, 540.0]</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          Tipo  Valor [$] Solución [X1, X2]\n",
       "0       Normal     6048.0    [540.0, 252.0]\n",
       "1  B. Estándar     4956.0      [708.0, 0.0]\n",
       "2    B. Deluxe     4860.0      [0.0, 540.0]"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Utilidad del bolso: Estándar, Deluxe ($)\n",
    "utilidad = np.array([[7, 9],\n",
    "                   [7, 0],\n",
    "                   [0, 9]])\n",
    "\n",
    "#Tiempos de Corte y Teñido: Estándar, Deluxe, Máximo [h]\n",
    "tiempos_CyT = np.array([7/10, 1, 630]) \n",
    "\n",
    "#Tiempos de Costura: Estándar, Deluxe, Máximo [h]\n",
    "tiempos_Co = np.array([1/2, 5/6, 600]) \n",
    "\n",
    "#Tiempos de Terminado: Estándar, Deluxe, Máximo [h]\n",
    "tiempos_Te = np.array([1, 2/3, 708]) \n",
    "\n",
    "#Tiempos de Terminado: Estándar, Deluxe, Máximo [h]\n",
    "tiempos_IyE = np.array([1/10, 1/4, 135]) \n",
    "\n",
    "\n",
    "#Matriz de restricciones\n",
    "A = np.array([[tiempos_CyT[0], tiempos_CyT[1]],\n",
    "             [tiempos_Co[0], tiempos_Co[1]],\n",
    "             [tiempos_Te[0], tiempos_Te[1]],\n",
    "             [tiempos_IyE[0], tiempos_IyE[1]],\n",
    "             ])\n",
    "\n",
    "#Matriz coeficientes inequalidades\n",
    "b = np.array([tiempos_CyT[2], tiempos_Co[2], tiempos_Te[2], tiempos_IyE[2]])\n",
    "\n",
    "#Restricción de variables no negativas\n",
    "bounds = [(  0,    None)]*2\n",
    "\n",
    "#Valor función objetivo y solución de las variables básicas\n",
    "val_p1 = []\n",
    "sol_p1 = []\n",
    "\n",
    "for i in range(utilidad.shape[0]):\n",
    "    #Función objetivo\n",
    "    c = utilidad[i]\n",
    "    \n",
    "    #Se transforma el problema a uno de minimización\n",
    "    res_p1 = linprog(-1*c, A_ub=A, b_ub=b, bounds=bounds, method='revised simplex', options={\"disp\": False})\n",
    "\n",
    "    #Se agregan los resultados en la lista\n",
    "    val_p1.append(round(res_p1.fun*-1, ndigits=2))\n",
    "    sol_p1.append(np.around(res_p1.x, decimals=2))\n",
    "\n",
    "#Visualización de los datos\n",
    "data_p1 = {\"Tipo\": ['Normal', 'B. Estándar', 'B. Deluxe'],\n",
    "          \"Valor [$]\": val_p1,\n",
    "          \"Solución [X1, X2]\": sol_p1}\n",
    "\n",
    "print('En la siguiente tabla se recopila el resultado de la función objetivo y solución de las variables básicas:')\n",
    "df1 = pd.DataFrame(data_p1)\n",
    "df1.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8b3d7453-0de8-41cd-8ea2-372d38247080",
   "metadata": {},
   "source": [
    "Tal y como se evidencia anteriormente, la mejor estrategia resulta ser la primera ya que es la que presenta una mayor utilidad. En cuanto a las otras dos, se comprueba que se garantiza unicamente la manufactura de un solo producto, sea estándat o deluxe."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c5b9e972-c712-4ea1-b82a-03dd0c49ec30",
   "metadata": {},
   "source": [
    "**Punto 2**\n",
    "\n",
    "*Planteamiento del Problema Dual*\n",
    "\n",
    "**Función Objetivo**\n",
    "\n",
    "max $G(\\lambda_{1}, \\lambda_{2}, \\lambda_{3}, \\lambda_{4}):$ $-T_{CyT} \\cdot \\lambda_{1} - T_{Co} \\cdot \\lambda_{2} - T_{Te} \\cdot \\lambda_{3} - T_{IyE} \\cdot \\lambda_{4}$ \n",
    "\n",
    "Donde,\n",
    "\n",
    "$T_{CyT}:$ Tiempo máximo de la planta para el Corte y Teñido (630h)\n",
    "\n",
    "$T_{Co}:$ Tiempo máximo de la planta para la Costura (600h)\n",
    "\n",
    "$T_{Te}:$ Tiempo máximo de la planta para el Terminado (708h)\n",
    "\n",
    "$T_{IyE}:$ Tiempo máximo de la planta para la Inspección y Empaque (135h)\n",
    "\n",
    "**Ecuaciones de Restricción**\n",
    "\n",
    "$-\\frac{7}{10} \\cdot \\lambda_{1} - \\frac{1}{2} \\cdot \\lambda_{2} - \\lambda_{3} - \\frac{1}{10} \\cdot \\lambda_{4} \\leq -U_{Me}$\n",
    "\n",
    "$-\\lambda_{1} - \\frac{5}{6} \\cdot \\lambda_{2} - \\frac{2}{3} \\cdot \\lambda_{3} - \\frac{1}{4} \\cdot \\lambda_{4} \\leq -U_{Md}$\n",
    "\n",
    "$\\lambda_{1}, \\lambda_{2}, \\lambda_{3}, \\lambda_{4} \\geq 0$ \n",
    "\n",
    "Donde,\n",
    "\n",
    "$U_{Me}:$ Utilidad del bolso de Modelo Estándar ($7)\n",
    "\n",
    "$U_{Md}:$ Utilidad del bolso de Modelo Deluxe ($9)\n",
    "\n",
    "\n",
    "* **Caso 1:** *Aumentar la utilidad de la bolsa Deluxe a \\$18 manteniendo la utilidad de la bolsa Estandar*\n",
    "\n",
    "$maxG(\\lambda_{1}, \\lambda_{2}, \\lambda_{3}, \\lambda_{4}): -T_{CyT} \\cdot \\lambda_{1} - T_{Co} \\cdot \\lambda_{2} - T_{Te} \\cdot \\lambda_{3} - T_{IyE} \\cdot \\lambda_{4}$\n",
    "\n",
    "S.A\n",
    "\n",
    "$-\\frac{7}{10} \\cdot \\lambda_{1} - \\frac{1}{2} \\cdot \\lambda_{2} - \\lambda_{3} - \\frac{1}{10} \\cdot \\lambda_{4} \\leq -7$\n",
    "\n",
    "$-\\lambda_{1} - \\frac{5}{6} \\cdot \\lambda_{2} - \\frac{2}{3} \\cdot \\lambda_{3} - \\frac{1}{4} \\cdot \\lambda_{4} \\leq -18$\n",
    "\n",
    "$\\lambda_{1}, \\lambda_{2}, \\lambda_{3}, \\lambda_{4} \\geq 0$ \n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "80d20fb5-ef78-45bf-ab8b-788bbca39998",
   "metadata": {},
   "source": [
    "* **Caso 2:** *Aumentar la utilidad de la bolsa Estandar a \\$14 manteniendo la utilidad de la bolsa Deluxe*\n",
    "\n",
    "$maxG(\\lambda_{1}, \\lambda_{2}, \\lambda_{3}, \\lambda_{4}): -T_{CyT} \\cdot \\lambda_{1} - T_{Co} \\cdot \\lambda_{2} - T_{Te} \\cdot \\lambda_{3} - T_{IyE} \\cdot \\lambda_{4}$\n",
    "\n",
    "\n",
    "$-\\frac{7}{10} \\cdot \\lambda_{1} - \\frac{1}{2} \\cdot \\lambda_{2} - \\lambda_{3} - \\frac{1}{10} \\cdot \\lambda_{4} \\leq -14$\n",
    "\n",
    "$-\\lambda_{1} - \\frac{5}{6} \\cdot \\lambda_{2} - \\frac{2}{3} \\cdot \\lambda_{3} - \\frac{1}{4} \\cdot \\lambda_{4} \\leq -9$\n",
    "\n",
    "$\\lambda_{1}, \\lambda_{2}, \\lambda_{3}, \\lambda_{4} \\geq 0$ "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b7fe41df-8988-47f7-9655-a5b2bb0e0272",
   "metadata": {},
   "source": [
    "* **Caso 3:** *Aumentar el trabajo disponible en un 70%*\n",
    "\n",
    "$maxG(\\lambda_{1}, \\lambda_{2}, \\lambda_{3}, \\lambda_{4}): 1.7 \\cdot (-T_{CyT} \\cdot \\lambda_{1} - T_{Co} \\cdot \\lambda_{2} - T_{Te} \\cdot \\lambda_{3} - T_{IyE} \\cdot \\lambda_{4})$\n",
    "\n",
    "S.A\n",
    "\n",
    "$-\\frac{7}{10} \\cdot \\lambda_{1} - \\frac{1}{2} \\cdot \\lambda_{2} - \\lambda_{3} - \\frac{1}{10} \\cdot \\lambda_{4} \\leq -7$\n",
    "\n",
    "$-\\lambda_{1} - \\frac{5}{6} \\cdot \\lambda_{2} - \\frac{2}{3} \\cdot \\lambda_{3} - \\frac{1}{4} \\cdot \\lambda_{4} \\leq -9$\n",
    "\n",
    "$\\lambda_{1}, \\lambda_{2}, \\lambda_{3}, \\lambda_{4} \\geq 0$ "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "ac5adceb-c4c6-4ff5-9415-0d6a26f7dd07",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "En la siguiente tabla se recopila el resultado de la función objetivo y solución de las variables básicas para el Problema Primal y Dual:\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Punto</th>\n",
       "      <th>Valor (Primal, Dual) [$]</th>\n",
       "      <th>S. Primal</th>\n",
       "      <th>S. Dual</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>a)</td>\n",
       "      <td>[9720.0, 9720.0]</td>\n",
       "      <td>[0.0, 540.0]</td>\n",
       "      <td>[0.0, 0.0, 0.0, 72.0]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>b)</td>\n",
       "      <td>[9912.0, 9912.0]</td>\n",
       "      <td>[708.0, 0.0]</td>\n",
       "      <td>[0.0, 0.0, 14.0, 0.0]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>c)</td>\n",
       "      <td>[10281.6, 10281.6]</td>\n",
       "      <td>[918.0, 428.4]</td>\n",
       "      <td>[8.12, 0.0, 1.31, 0.0]</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Punto Valor (Primal, Dual) [$]       S. Primal                 S. Dual\n",
       "0    a)         [9720.0, 9720.0]    [0.0, 540.0]   [0.0, 0.0, 0.0, 72.0]\n",
       "1    b)         [9912.0, 9912.0]    [708.0, 0.0]   [0.0, 0.0, 14.0, 0.0]\n",
       "2    c)       [10281.6, 10281.6]  [918.0, 428.4]  [8.12, 0.0, 1.31, 0.0]"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Ecuaciones de restricción: Problema Primal y Dual (Caso 1, Caso 2, Caso 3)\n",
    "A_p = A\n",
    "A_d = -1*np.transpose(A)\n",
    "\n",
    "#Matriz coeficientes: Problema Primal y Dual (Caso 1, Caso 2, Caso 3)\n",
    "b_p = np.array([b, b, 1.7*b])\n",
    "\n",
    "b_d = -1*np.array([[7, 18],\n",
    "                [14, 9],\n",
    "                [7, 9]])\n",
    "\n",
    "#Función costo: Primal y Dual (Caso 1, Caso 2, Caso 3)\n",
    "c_p = b_d\n",
    "c_d = -1*b_p\n",
    "\n",
    "#Valor función objetivo y solución de las variables básicas: Primal, Dual\n",
    "val = []\n",
    "\n",
    "sol_p = []\n",
    "sol_d = []\n",
    "\n",
    "for i in range(b_d.shape[0]):\n",
    "    #Se transforma el problema a uno de minimización\n",
    "    res_p = linprog(c_p[i], A_ub=A_p, b_ub=b_p[i], method='revised simplex', options={\"disp\": False})\n",
    "    res_d = linprog(-1*c_d[i], A_ub=A_d, b_ub=b_d[i], method='revised simplex', options={\"disp\": False})\n",
    "    \n",
    "    #Se agregan los resultados en la lista\n",
    "    val_p = round(res_p.fun*-1, ndigits=2)\n",
    "    val_d = round(res_d.fun, ndigits=2)\n",
    "    val.append([val_p, val_d])\n",
    "    \n",
    "    sol_p.append(np.around(res_p.x, decimals=2))\n",
    "    sol_d.append(np.around(res_d.x, decimals=2))\n",
    "    \n",
    "data_dp = {\"Punto\": ['a)', 'b)', 'c)'],\n",
    "         \"Valor (Primal, Dual) [$]\": val,\n",
    "         \"S. Primal\": sol_p, \n",
    "         \"S. Dual\": sol_d}\n",
    "\n",
    "print('En la siguiente tabla se recopila el resultado de la función objetivo y solución de las variables básicas para el Problema Primal y Dual:')\n",
    "dps = pd.DataFrame(data_dp)\n",
    "dps.head()\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ec16c5d8-8b85-4ab9-804f-b76b9b092e9c",
   "metadata": {},
   "source": [
    "Como se puede ver la mejor estrategia es la C) ya que es la que presenta una mayor utilidad frente a las demás opciones."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ef786495-0bfb-4406-a00f-bfa056d5f8f4",
   "metadata": {},
   "source": [
    "**Punto 3**\n",
    "\n",
    "Se desarrolla una función que recibe como parámetros la información del Problema Primal y su respectiva solución en cuanto al Problema Dual. Esta permite al usuario hallar la solución del problema primal sin la necesidad de una fase adicional de optimización."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "5bdd2a26-1168-4d28-bffd-0e3395f111ba",
   "metadata": {},
   "outputs": [],
   "source": [
    "def sol_holgura_complementaria(A, b, f, res):\n",
    "    reg = []\n",
    "    q = np.transpose(res)*b\n",
    "    Ls = np.size(res)\n",
    "    for i in range(Ls):\n",
    "        if res[i] > 0:\n",
    "            reg.append(i)\n",
    "    A_in = []\n",
    "    b_in = []\n",
    "    for i in reg:\n",
    "        A_in.append(A[i])\n",
    "        b_in.append(b[i])\n",
    "    A_in.append(f)\n",
    "    b_in.append(q)\n",
    "    sol_p = solve(A_in,b_in)\n",
    "    return sol_p"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
